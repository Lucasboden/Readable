{"ast":null,"code":"import _regeneratorRuntime from \"/home/gedanken01/Desktop/Readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gedanken01/Desktop/Readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as ReadableAPI from '../utils/ReadableAPI';\nimport uuid from \"uuid/v4\";\nexport var LOAD_POSTS = 'LOAD_POSTS';\nexport var VOTE_ON_POST = 'VOTE_ON_POST';\nexport var loadPosts = function loadPosts(posts) {\n  return {\n    type: LOAD_POSTS,\n    posts: posts\n  };\n};\nexport var fetchPosts = function fetchPosts(category) {\n  return function (dispatch) {\n    return ReadableAPI.getPosts(category).then(function (posts) {\n      return dispatch(loadPosts(posts));\n    });\n  };\n};\nexport var fetchRegisterPost = function fetchRegisterPost(title, body, author, category) {\n  var id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : uuid();\n  var timestamp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Date.now();\n  return function (dispatch) {\n    return ReadableAPI.registerPost(title, body, author, category, id, timestamp);\n  };\n};\nexport var vote = function vote(postId, type) {\n  return function () {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(dispatch) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return ReadableAPI.vote(postId, type);\n\n                case 2:\n                  response = _context.sent;\n                  response.then(function (res) {\n                    return dispatch({\n                      type: VOTE_ON_POST,\n                      payload: res\n                    });\n                  });\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  };\n};","map":{"version":3,"sources":["/home/gedanken01/Desktop/Readable/frontend/src/actions/Posts.js"],"names":["ReadableAPI","uuid","LOAD_POSTS","VOTE_ON_POST","loadPosts","posts","type","fetchPosts","category","dispatch","getPosts","then","fetchRegisterPost","title","body","author","id","timestamp","Date","now","registerPost","vote","postId","response","res","payload"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,sBAA7B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA,SAAK;AAClCC,IAAAA,IAAI,EAAEJ,UAD4B;AAElCG,IAAAA,KAAK,EAALA;AAFkC,GAAL;AAAA,CAAvB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ;AAAA,WAC7CT,WAAW,CACVU,QADD,CACUF,QADV,EAECG,IAFD,CAEM,UAAAN,KAAK;AAAA,aAAII,QAAQ,CAACL,SAAS,CAACC,KAAD,CAAV,CAAZ;AAAA,KAFX,CAD6C;AAAA,GAAZ;AAAA,CAA3B;AAMP,OAAO,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAOC,IAAP,EAAYC,MAAZ,EAAmBP,QAAnB;AAAA,MAA4BQ,EAA5B,uEAA+Bf,IAAI,EAAnC;AAAA,MAAsCgB,SAAtC,uEAAgDC,IAAI,CAACC,GAAL,EAAhD;AAAA,SAA+D,UAAAV,QAAQ;AAAA,WACvGT,WAAW,CACVoB,YADD,CACcP,KADd,EACoBC,IADpB,EACyBC,MADzB,EACgCP,QADhC,EACyCQ,EADzC,EAC4CC,SAD5C,CADuG;AAAA,GAAvE;AAAA,CAA1B;AAKP,OAAO,IAAMI,IAAI,GAAG,SAAPA,IAAO,CAACC,MAAD,EAAQhB,IAAR;AAAA,SAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAK,iBAAMG,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAClBT,WAAW,CAACqB,IAAZ,CAAiBC,MAAjB,EAAwBhB,IAAxB,CADkB;;AAAA;AACnCiB,kBAAAA,QADmC;AAEzCA,kBAAAA,QAAQ,CAACZ,IAAT,CAAc,UAAAa,GAAG;AAAA,2BAAIf,QAAQ,CAAC;AAC7BH,sBAAAA,IAAI,EAAEH,YADuB;AAE7BsB,sBAAAA,OAAO,EAAED;AAFoB,qBAAD,CAAZ;AAAA,mBAAjB;;AAFyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;AAAA,CAAb","sourcesContent":["import * as ReadableAPI from '../utils/ReadableAPI'\nimport uuid from \"uuid/v4\";\nexport const LOAD_POSTS = 'LOAD_POSTS'\nexport const VOTE_ON_POST = 'VOTE_ON_POST'\nexport const loadPosts = posts => ({\n\ttype: LOAD_POSTS,\n\tposts\n})\n\nexport const fetchPosts = category => dispatch => (\n\tReadableAPI\n\t.getPosts(category)\n\t.then(posts => dispatch(loadPosts(posts)))\n);\n\nexport const fetchRegisterPost = (title,body,author,category,id=uuid(),timestamp=Date.now()) => dispatch => (\n\tReadableAPI\n\t.registerPost(title,body,author,category,id,timestamp)\n);\n\nexport const vote = (postId,type) => ()=> async dispatch => {\n\tconst response = await ReadableAPI.vote(postId,type)\n\tresponse.then(res => dispatch({\n\t\ttype: VOTE_ON_POST,\n\t\tpayload: res\n\t}))\n};\n"]},"metadata":{},"sourceType":"module"}