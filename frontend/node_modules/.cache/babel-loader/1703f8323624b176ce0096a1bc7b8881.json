{"ast":null,"code":"import * as ReadableAPI from '../utils/ReadableAPI';\nexport var LOAD_COMMENTS = 'LOAD_COMMENTS';\nexport var loadComments = function loadComments(comments) {\n  return {\n    type: LOAD_COMMENTS,\n    comments: comments\n  };\n};\nexport var fetchComments = function fetchComments(postId) {\n  return function (dispatch) {\n    return ReadableAPI.getComments(postId).then(function (comments) {\n      return dispatch(loadComments(comments));\n    });\n  };\n};\nexport var fetchRegisterComment = function fetchRegisterComment(body, author, postId) {\n  var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : uuid();\n  var timestamp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Date.now();\n  return function (dispatch) {\n    return ReadableAPI.registerComment(body, author, postId, id, timestamp).then(function (comment) {\n      dispatch({\n        type: ADD_COMMENT,\n        comment: comment\n      });\n    });\n  };\n};\nexport var vote = function vote(commentId, type) {\n  return function (dispatch) {\n    ReadableAPI.voteComment(commentId, type).then(function (post) {\n      dispatch({\n        type: VOTE_ON_COMMENT,\n        comment: comment\n      });\n    });\n  };\n};\nexport var deleteComment = function deleteComment(commentId) {\n  return function (dispatch) {\n    ReadableAPI.deleteComment(commentId).then(function (comment) {\n      dispatch({\n        type: DELETE_COMMENT,\n        commentId: commentId\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/gedanken01/Desktop/Readable/frontend/src/actions/Comments.js"],"names":["ReadableAPI","LOAD_COMMENTS","loadComments","comments","type","fetchComments","postId","dispatch","getComments","then","fetchRegisterComment","body","author","id","uuid","timestamp","Date","now","registerComment","comment","ADD_COMMENT","vote","commentId","voteComment","post","VOTE_ON_COMMENT","deleteComment","DELETE_COMMENT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,sBAA7B;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ;AAAA,SAAK;AACxCC,IAAAA,IAAI,EAAEH,aADkC;AAExCE,IAAAA,QAAQ,EAARA;AAFwC,GAAL;AAAA,CAA7B;AAKP,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM;AAAA,SAAI,UAAAC,QAAQ;AAAA,WAC9CP,WAAW,CACVQ,WADD,CACaF,MADb,EAECG,IAFD,CAEM,UAAAN,QAAQ;AAAA,aAAII,QAAQ,CAACL,YAAY,CAACC,QAAD,CAAb,CAAZ;AAAA,KAFd,CAD8C;AAAA,GAAZ;AAAA,CAA5B;AAQP,OAAO,IAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAMC,MAAN,EAAaN,MAAb;AAAA,MAAoBO,EAApB,uEAAuBC,IAAI,EAA3B;AAAA,MAA8BC,SAA9B,uEAAwCC,IAAI,CAACC,GAAL,EAAxC;AAAA,SAAuD,UAAAV,QAAQ;AAAA,WAClGP,WAAW,CACVkB,eADD,CACiBP,IADjB,EACsBC,MADtB,EAC6BN,MAD7B,EACoCO,EADpC,EACuCE,SADvC,EACkDN,IADlD,CACuD,UAACU,OAAD,EAAa;AACnEZ,MAAAA,QAAQ,CAAC;AACRH,QAAAA,IAAI,EAAEgB,WADE;AAERD,QAAAA,OAAO,EAAPA;AAFQ,OAAD,CAAR;AAIA,KAND,CADkG;AAAA,GAA/D;AAAA,CAA7B;AAUP,OAAO,IAAME,IAAI,GAAG,SAAPA,IAAO,CAACC,SAAD,EAAWlB,IAAX;AAAA,SAAoB,UAAAG,QAAQ,EAAI;AACnDP,IAAAA,WAAW,CAACuB,WAAZ,CAAwBD,SAAxB,EAAkClB,IAAlC,EAAwCK,IAAxC,CAA6C,UAACe,IAAD,EAAU;AACtDjB,MAAAA,QAAQ,CAAC;AACTH,QAAAA,IAAI,EAAEqB,eADG;AAETN,QAAAA,OAAO,EAAPA;AAFS,OAAD,CAAR;AAIA,KALD;AAMA,GAPmB;AAAA,CAAb;AASP,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACJ,SAAD;AAAA,SAAe,UAAAf,QAAQ,EAAI;AACvDP,IAAAA,WAAW,CAAC0B,aAAZ,CAA0BJ,SAA1B,EAAqCb,IAArC,CAA0C,UAACU,OAAD,EAAa;AACtDZ,MAAAA,QAAQ,CAAC;AACTH,QAAAA,IAAI,EAAEuB,cADG;AAETL,QAAAA,SAAS,EAATA;AAFS,OAAD,CAAR;AAIA,KALD;AAMA,GAP4B;AAAA,CAAtB","sourcesContent":["import * as ReadableAPI from '../utils/ReadableAPI'\n\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS'\n\nexport const loadComments = comments => ({\n\ttype: LOAD_COMMENTS,\n\tcomments\n})\n\nexport const fetchComments = postId => dispatch => (\n\tReadableAPI\n\t.getComments(postId)\n\t.then(comments => dispatch(loadComments(comments)))\n);\n\n\n\nexport const fetchRegisterComment = (body,author,postId,id=uuid(),timestamp=Date.now()) => dispatch => (\n\tReadableAPI\n\t.registerComment(body,author,postId,id,timestamp).then((comment) => {\n\t\tdispatch({\n\t\t\ttype: ADD_COMMENT,\n\t\t\tcomment\n\t\t})\n\t})\n);\n\nexport const vote = (commentId,type) => dispatch => {\n\tReadableAPI.voteComment(commentId,type).then((post) => {\n\t\tdispatch({\n\t\ttype: VOTE_ON_COMMENT,\n\t\tcomment\n\t\t})\n\t})\n};\n\nexport const deleteComment = (commentId) => dispatch => {\n\tReadableAPI.deleteComment(commentId).then((comment) => {\n\t\tdispatch({\n\t\ttype: DELETE_COMMENT,\n\t\tcommentId\n\t\t})\n\t})\n};"]},"metadata":{},"sourceType":"module"}