{"ast":null,"code":"import * as ReadableAPI from '../utils/ReadableAPI';\nimport uuid from \"uuid/v4\";\nexport var LOAD_COMMENTS = 'LOAD_COMMENTS';\nexport var VOTE_ON_COMMENT = 'VOTE_ON_COMMENT';\nexport var ADD_COMMENT = 'ADD_COMMENT';\nexport var DELETE_COMMENT = 'DELETE_COMMENT';\nexport var EDIT_COMMENT = 'EDIT_COMMENT';\nexport var loadComments = function loadComments(comments) {\n  return {\n    type: LOAD_COMMENTS,\n    comments: comments\n  };\n};\nexport var fetchComments = function fetchComments(postId) {\n  return function (dispatch) {\n    return ReadableAPI.getComments(postId).then(function (comments) {\n      return dispatch(loadComments(comments));\n    });\n  };\n};\nexport var fetchRegisterComment = function fetchRegisterComment(body, author, postId) {\n  var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : uuid();\n  var timestamp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Date.now();\n  return function (dispatch) {\n    return ReadableAPI.registerComment(body, author, postId, id, timestamp).then(function (comment) {\n      dispatch({\n        type: ADD_COMMENT,\n        comment: comment\n      });\n    });\n  };\n};\nexport var vote = function vote(commentId, type) {\n  return function (dispatch) {\n    ReadableAPI.voteComment(commentId, type).then(function (comment) {\n      dispatch({\n        type: VOTE_ON_COMMENT,\n        comment: comment\n      });\n    });\n  };\n};\nexport var deleteComment = function deleteComment(commentId) {\n  return function (dispatch) {\n    ReadableAPI.deleteComment(commentId).then(function (comment) {\n      dispatch({\n        type: DELETE_COMMENT,\n        commentId: commentId\n      });\n    });\n  };\n};\nexport var getCommentDetails = function getCommentDetails(commentId) {\n  return function (dispatch) {\n    return ReadableAPI.getComment(commentId);\n  };\n};\nexport var editComment = function editComment(commentContent, commentId) {\n  var timestamp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  return function (dispatch) {\n    return ReadableAPI.editComment(commentContent, commentId).then(function (comment) {\n      dispatch({\n        type: EDIT_COMMENT,\n        comment: comment\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/gedanken01/Desktop/Readable/frontend/src/actions/Comments.js"],"names":["ReadableAPI","uuid","LOAD_COMMENTS","VOTE_ON_COMMENT","ADD_COMMENT","DELETE_COMMENT","EDIT_COMMENT","loadComments","comments","type","fetchComments","postId","dispatch","getComments","then","fetchRegisterComment","body","author","id","timestamp","Date","now","registerComment","comment","vote","commentId","voteComment","deleteComment","getCommentDetails","getComment","editComment","commentContent"],"mappings":"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","sourcesContent":["import * as ReadableAPI from '../utils/ReadableAPI'\nimport uuid from \"uuid/v4\";\n\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS'\nexport const VOTE_ON_COMMENT = 'VOTE_ON_COMMENT'\nexport const ADD_COMMENT = 'ADD_COMMENT'\nexport const DELETE_COMMENT = 'DELETE_COMMENT'\nexport const EDIT_COMMENT = 'EDIT_COMMENT'\n\nexport const loadComments = comments => ({\n\ttype: LOAD_COMMENTS,\n\tcomments\n})\n\nexport const fetchComments = postId => dispatch => (\n\tReadableAPI\n\t.getComments(postId)\n\t.then(comments => dispatch(loadComments(comments)))\n);\n\nexport const fetchRegisterComment = (body,author,postId,id=uuid(),timestamp=Date.now()) => dispatch => {\n\treturn ReadableAPI\n\t.registerComment(body,author,postId,id,timestamp).then(comment => {\n\t\tdispatch({\n\t\t\ttype: ADD_COMMENT,\n\t\t\tcomment\n\t\t})\n\t})\n};\n\nexport const vote = (commentId,type) => dispatch => {\n\tReadableAPI.voteComment(commentId,type).then((comment) => {\n\t\tdispatch({\n\t\ttype: VOTE_ON_COMMENT,\n\t\tcomment\n\t\t})\n\t})\n};\n\nexport const deleteComment = (commentId) => dispatch => {\n\tReadableAPI.deleteComment(commentId).then((comment) => {\n\t\tdispatch({\n\t\ttype: DELETE_COMMENT,\n\t\tcommentId\n\t\t})\n\t})\n};\n\nexport const getCommentDetails = (commentId) => dispatch => {\n\treturn ReadableAPI.getComment(commentId)\n};\n\nexport const editComment = (commentContent,commentId,timestamp=Date.now()) => dispatch => {\n\treturn ReadableAPI.editComment(commentContent,commentId).then((comment) =>{\n\t\tdispatch({\n\t\ttype: EDIT_COMMENT,\n\t\tcomment\n\t\t})\t\n\t})\n};"]},"metadata":{},"sourceType":"module"}