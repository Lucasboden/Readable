{"ast":null,"code":"import _objectSpread from \"/home/gedanken01/Desktop/Readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { headers, API } from './config';\nexport var getAllCategories = function getAllCategories() {\n  return fetch(\"\".concat(API, \"/categories\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.categories;\n  });\n};\nexport var getPosts = function getPosts(category) {\n  var path = category === 'all' ? 'posts' : \"\".concat(category, \"/posts\");\n  return fetch(\"\".concat(API, \"/\").concat(path), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var registerPost = function registerPost(title, body, author, category, id, timestamp) {\n  fetch(\"\".concat(API, \"/posts\"), {\n    method: 'POST',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      id: id,\n      title: title,\n      body: body,\n      author: author,\n      category: category,\n      timestamp: timestamp\n    })\n  }).then(function (res) {\n    return res.json();\n  });\n};\nexport var vote = function vote(postId, type) {\n  fetch(\"\".concat(API, \"/posts/\").concat(postId), {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      option: type\n    })\n  }).then(function (res) {\n    console.log(res.json());\n    res.json();\n  });\n};","map":{"version":3,"sources":["/home/gedanken01/Desktop/Readable/frontend/src/utils/ReadableAPI.js"],"names":["headers","API","getAllCategories","fetch","then","res","json","data","categories","getPosts","category","path","registerPost","title","body","author","id","timestamp","method","JSON","stringify","vote","postId","type","option","console","log"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,UAA7B;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAC9BC,KAAK,WAAIF,GAAJ,kBAAsB;AAAED,IAAAA,OAAO,EAAPA;AAAF,GAAtB,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADT,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,UAAT;AAAA,GAFV,CAD8B;AAAA,CAAzB;AAKP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,QAAQ,EAAG;AACjC,MAAMC,IAAI,GAAGD,QAAQ,KAAK,KAAb,GAAqB,OAArB,aAAkCA,QAAlC,WAAb;AACA,SAAOP,KAAK,WAAIF,GAAJ,cAAWU,IAAX,GAAmB;AAAEX,IAAAA,OAAO,EAAPA;AAAF,GAAnB,CAAL,CACNI,IADM,CACD,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADF,CAAP;AAED,CAJM;AAMP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAOC,IAAP,EAAYC,MAAZ,EAAmBL,QAAnB,EAA4BM,EAA5B,EAA+BC,SAA/B,EAA4C;AACvEd,EAAAA,KAAK,WAAIF,GAAJ,aACL;AACEiB,IAAAA,MAAM,EAAE,MADV;AAGAlB,IAAAA,OAAO,oBACCA,OADD;AAEF,sBAAgB;AAFd,MAHP;AAOEc,IAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAe;AACnBJ,MAAAA,EAAE,EAAEA,EADe;AAEnBH,MAAAA,KAAK,EAAEA,KAFY;AAGnBC,MAAAA,IAAI,EAAEA,IAHa;AAInBC,MAAAA,MAAM,EAAEA,MAJW;AAKnBL,MAAAA,QAAQ,EAAEA,QALS;AAMnBO,MAAAA,SAAS,EAAEA;AANQ,KAAf;AAPR,GADK,CAAL,CAgBGb,IAhBH,CAgBQ,UAAAC,GAAG,EAAI;AACd,WAAOA,GAAG,CAACC,IAAJ,EAAP;AAAmB,GAjBpB;AAkBA,CAnBM;AAqBP,OAAO,IAAMe,IAAI,GAAG,SAAPA,IAAO,CAACC,MAAD,EAASC,IAAT,EAAiB;AACpCpB,EAAAA,KAAK,WAAIF,GAAJ,oBAAiBqB,MAAjB,GACL;AACEJ,IAAAA,MAAM,EAAE,MADV;AAEAlB,IAAAA,OAAO,EAAPA,OAFA;AAGEc,IAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAe;AACnBI,MAAAA,MAAM,EAAED;AADW,KAAf;AAHR,GADK,CAAL,CAOGnB,IAPH,CAOQ,UAAAC,GAAG,EAAI;AACdoB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,GAAG,CAACC,IAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACC,IAAJ;AACA,GAVD;AAWA,CAZM","sourcesContent":["import { headers, API } from './config'\n\nexport const getAllCategories = () =>\n  fetch(`${API}/categories`, { headers })\n  .then(res => res.json())\n  .then(data => data.categories)\n\nexport const getPosts = category =>{\n  const path = category === 'all' ? 'posts' : `${category}/posts`\n  return(fetch(`${API}/${path}`, { headers })\n  .then(res => res.json()))\n}\n\nexport const registerPost = (title,body,author,category,id,timestamp) =>{\n\tfetch(`${API}/posts`,\n\t{\n\t  method: 'POST',\n\t  \n\theaders: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n\t  body: JSON.stringify({ \n\t    id: id,\n\t    title: title,\n\t    body: body,\n\t    author: author,\n\t    category: category,\n\t    timestamp: timestamp,\n\t   }) \n\t}).then(res => {\n\t\treturn(res.json())})\n}\n\nexport const vote = (postId, type) =>{\n\tfetch(`${API}/posts/${postId}`,\n\t{\n\t  method: 'POST',\n\theaders,\n\t  body: JSON.stringify({ \n\t    option: type,\n\t   }) \n\t}).then(res => {\n\t\tconsole.log(res.json())\n\t\tres.json()\n\t})\n}\n\n  \n\n"]},"metadata":{},"sourceType":"module"}