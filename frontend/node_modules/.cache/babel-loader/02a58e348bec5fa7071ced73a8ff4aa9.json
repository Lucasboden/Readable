{"ast":null,"code":"import { headers, API } from './config';\n/*\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n*/\n\nexport var getAllCategories = function getAllCategories() {\n  return fetch(\"\".concat(API, \"/categories\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.categories;\n  });\n};\nexport var getPosts = function getPosts(category) {\n  var path = category === 'all' ? 'posts' : \"\".concat(category, \"/posts\");\n  return fetch(\"\".concat(API, \"/\").concat(path), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }); //.then(data => data.map(item => item.id))\n};\nexport var registerPost = function registerPost(title, body, author, category) {\n  var id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var timestamp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Date.now();\n  fetch(\"\".concat(API, \"/post\"), {\n    method: 'POST',\n    mode: 'cors',\n    body: JSON.stringify({\n      id: id,\n      title: title,\n      body: body,\n      author: author,\n      category: category,\n      timestamp: timestamp\n    })\n  });\n};","map":{"version":3,"sources":["/home/lucas/Desktop/React/Readable/frontend/src/utils/ReadableAPI.js"],"names":["headers","API","getAllCategories","fetch","then","res","json","data","categories","getPosts","category","path","registerPost","title","body","author","id","timestamp","Date","now","method","mode","JSON","stringify"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,UAA7B;AAEA;;;;;;;AAMA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAC9BC,KAAK,WAAIF,GAAJ,kBAAsB;AAAED,IAAAA,OAAO,EAAPA;AAAF,GAAtB,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADT,EAECF,IAFD,CAEM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,UAAT;AAAA,GAFV,CAD8B;AAAA,CAAzB;AAKP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,QAAQ,EAAG;AACjC,MAAMC,IAAI,GAAGD,QAAQ,KAAK,KAAb,GAAqB,OAArB,aAAkCA,QAAlC,WAAb;AACA,SAAOP,KAAK,WAAIF,GAAJ,cAAWU,IAAX,GAAmB;AAAEX,IAAAA,OAAO,EAAPA;AAAF,GAAnB,CAAL,CACNI,IADM,CACD,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADF,CAAP,CAFiC,CAIjC;AACD,CALM;AAOP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAOC,IAAP,EAAYC,MAAZ,EAAmBL,QAAnB,EAAyD;AAAA,MAA7BM,EAA6B,uEAA1B,CAA0B;AAAA,MAAxBC,SAAwB,uEAAdC,IAAI,CAACC,GAAL,EAAc;AACpFhB,EAAAA,KAAK,WAAIF,GAAJ,YACL;AACEmB,IAAAA,MAAM,EAAE,MADV;AAEEC,IAAAA,IAAI,EAAC,MAFP;AAGEP,IAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAe;AACnBP,MAAAA,EAAE,EAAEA,EADe;AAEnBH,MAAAA,KAAK,EAAEA,KAFY;AAGnBC,MAAAA,IAAI,EAAEA,IAHa;AAInBC,MAAAA,MAAM,EAAEA,MAJW;AAKnBL,MAAAA,QAAQ,EAAEA,QALS;AAMnBO,MAAAA,SAAS,EAAEA;AANQ,KAAf;AAHR,GADK,CAAL;AAaA,CAdM","sourcesContent":["import { headers, API } from './config'\n\n/*\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n*/\nexport const getAllCategories = () =>\n  fetch(`${API}/categories`, { headers })\n  .then(res => res.json())\n  .then(data => data.categories)\n\nexport const getPosts = category =>{\n  const path = category === 'all' ? 'posts' : `${category}/posts`\n  return(fetch(`${API}/${path}`, { headers })\n  .then(res => res.json()))\n  //.then(data => data.map(item => item.id))\n}\n\nexport const registerPost = (title,body,author,category,id=1,timestamp=Date.now()) =>{\n\tfetch(`${API}/post`,\n\t{\n\t  method: 'POST',\n\t  mode:'cors', \n\t  body: JSON.stringify({ \n\t    id: id,\n\t    title: title,\n\t    body: body,\n\t    author: author,\n\t    category: category,\n\t    timestamp: timestamp,\n\t   }) \n\t})\n}\n\n  \n\n"]},"metadata":{},"sourceType":"module"}