{"ast":null,"code":"import _toConsumableArray from \"/home/gedanken01/Desktop/Readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/gedanken01/Desktop/Readable/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { LOAD_COMMENTS, VOTE_ON_COMMENT, DELETE_COMMENT, ADD_COMMENT } from '../actions/Comments';\nexport function commentsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD_COMMENTS:\n      var comments = action.comments;\n      return _objectSpread({}, state, {\n        comments: comments\n      });\n\n    case VOTE_ON_COMMENT:\n      var currentCommentVote = _toConsumableArray(state.comments);\n\n      var index = currentCommentVote.findIndex(function (comment) {\n        return comment.id === action.comment.id;\n      });\n      currentCommentVote[index].voteScore = action.comment.voteScore;\n      return {\n        comments: _toConsumableArray(currentCommentVote)\n      };\n\n    case DELETE_COMMENT:\n      var currentCommentDelete = _toConsumableArray(state.comments);\n\n      var indexDelete = currentCommentDelete.findIndex(function (comment) {\n        return comment.id === action;\n      });\n      var aux = currentCommentDelete.splice(indexDelete, 1);\n      return {\n        comments: _toConsumableArray(currentCommentDelete)\n      };\n\n    case 'ADD_COMMENT':\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: [].concat(_toConsumableArray(state.post.comments), [action.comment])\n        })\n      });\n\n    default:\n      return state;\n  }\n}\nexport default commentsReducer;","map":{"version":3,"sources":["/home/gedanken01/Desktop/Readable/frontend/src/reducers/commentsReducer.js"],"names":["LOAD_COMMENTS","VOTE_ON_COMMENT","DELETE_COMMENT","ADD_COMMENT","commentsReducer","state","action","type","comments","currentCommentVote","index","findIndex","comment","id","voteScore","currentCommentDelete","indexDelete","aux","splice","post"],"mappings":";;AAAA,SAASA,aAAT,EAAuBC,eAAvB,EAAuCC,cAAvC,EAAsDC,WAAtD,QAAyE,qBAAzE;AAEA,OAAO,SAASC,eAAT,GAAyC;AAAA,MAAhBC,KAAgB,uEAAV,EAAU;AAAA,MAAPC,MAAO;;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACC,SAAKP,aAAL;AAAA,UACSQ,QADT,GACsBF,MADtB,CACSE,QADT;AAEC,+BACIH,KADJ;AAECG,QAAAA,QAAQ,EAARA;AAFD;;AAID,SAAKP,eAAL;AACC,UAAMQ,kBAAkB,sBAAOJ,KAAK,CAACG,QAAb,CAAxB;;AACK,UAAME,KAAK,GAAED,kBAAkB,CAACE,SAAnB,CAA6B,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACM,OAAP,CAAeC,EAAlC;AAAA,OAApC,CAAb;AACFJ,MAAAA,kBAAkB,CAACC,KAAD,CAAlB,CAA0BI,SAA1B,GAAsCR,MAAM,CAACM,OAAP,CAAeE,SAArD;AACA,aAAO;AACLN,QAAAA,QAAQ,qBAAMC,kBAAN;AADH,OAAP;;AAGJ,SAAKP,cAAL;AACE,UAAIa,oBAAoB,sBAAOV,KAAK,CAACG,QAAb,CAAxB;;AACI,UAAMQ,WAAW,GAAGD,oBAAoB,CAACJ,SAArB,CAA+B,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,EAAR,KAAeP,MAAnB;AAAA,OAAtC,CAApB;AACA,UAAIW,GAAG,GAAGF,oBAAoB,CAACG,MAArB,CAA4BF,WAA5B,EAAwC,CAAxC,CAAV;AACA,aAAO;AACPR,QAAAA,QAAQ,qBAAMO,oBAAN;AADD,OAAP;;AAGN,SAAK,aAAL;AACK,+BACKV,KADL;AAEEc,QAAAA,IAAI,oBACCd,KAAK,CAACc,IADP;AAEFX,UAAAA,QAAQ,+BAAMH,KAAK,CAACc,IAAN,CAAWX,QAAjB,IAA2BF,MAAM,CAACM,OAAlC;AAFN;AAFN;;AAOL;AACC,aAAOP,KAAP;AA9BF;AAgCA;AAED,eAAeD,eAAf","sourcesContent":["import { LOAD_COMMENTS,VOTE_ON_COMMENT,DELETE_COMMENT,ADD_COMMENT } from '../actions/Comments'\n\nexport function commentsReducer(state={},action){\n\tswitch(action.type){\n\t\tcase LOAD_COMMENTS:\n\t\t\tconst { comments } = action\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcomments\n\t\t\t}\n\t\tcase VOTE_ON_COMMENT:\n\t\t\tconst currentCommentVote = [...state.comments]\n\t      \tconst index= currentCommentVote.findIndex(comment => comment.id === action.comment.id)\n    \t\tcurrentCommentVote[index].voteScore = action.comment.voteScore\n\t\t    return {\n\t\t      comments: [...currentCommentVote]\n\t\t    }\n\t\tcase DELETE_COMMENT:\n\t\t \tvar currentCommentDelete = [...state.comments]\n\t      \tconst indexDelete = currentCommentDelete.findIndex(comment => comment.id === action)\n\t      \tvar aux = currentCommentDelete.splice(indexDelete,1)\n\t      \treturn {\n\t\t      comments: [...currentCommentDelete]\n\t\t    }\n\t\tcase 'ADD_COMMENT':\n\t      return {\n\t        ...state,\n\t        post: {\n\t          ...state.post,\n\t          comments: [...state.post.comments, action.comment]\n\t        }\n\t      }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default commentsReducer"]},"metadata":{},"sourceType":"module"}